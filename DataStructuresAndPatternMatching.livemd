# Data Structures and Pattern Matching

## Data Structures

* Lists
* Tuples
* keyword Lists
* Maps
* Structs
* MapSets

### <ins>Lists</ins>

Lists are represented in Elixir as linked made up of cons cells. That is, each cell in the list is made of two parts; the value and a pointer to the next cell in the list with the last cell being an empty cell that has neither a value nor a pointer. The use of cons cells means that the values are not stored in contiguous memory locations but hold a sequence of pointers to values.

<!-- livebook:{"force_markdown":true} -->

```elixir
  iex> list = [ "a" | [ 2 | [ :atom |[]]]]
  ["a", 2, :3]
```

### Charecteristics -

* Not stored in a contiguous memory locations
* Fast/cheap to push and pop values to and from the head
* In enfficient/slow to put or take values from the tail
* Values are ordered
* Implements Enumerable protocol

#### Uses -

Storing an unknown or large quantities of data that needs to be ordered

#### Functionality

* Pattern match with [head | tail]

* Kernel
  * hd/1 - returns the head of the list
  * tl/1 - returns the tail of the list

* List Module
  * to_string/1 - converts a list to a string
  * zip/1 - Combines coresponding element from a list of lists into tuples
    ```iex> List.zip([[1, 2, 3], ["a", "b", "c"]]
        [{1, "a"}, {2, "b"}, {3, "c"}]```
    * insert_at/3 - Returns the list with a value added at a specific index

* Enum
  * map/2 - Returns a new list where every element of the original list has been updated by the function provided

```elixir
list = [1 | [2 | [3]]]
[head | tail] = list
head
tail
hd(list)
tl(list)
```

### <ins>Tuples</ins>

Tuples are ordered fix-size sets of values that are stored in contiguous memory locations

<!-- livebook:{"force_markdown":true} -->

```elixir
  iex> tuple = {1, "a", :3}
```

### Characteristics

* Fast/efficient access (constant time)
* Slow/inefficient update (liniar time)
* Does not implement the Enumerable protocol
* Can contain values of any type

### Uses
  Tuples are commonly used to capture return values from impure functions that may return multiple values

* I've been using it to pass multiple value to my functions to make it easy to use the `|>` operator.

```
    iex> {:ok, value}
    {:ok, value}

    iex> {:error, error_reson}
    {:error, error_reason}
```

### Functionality
- pattern matching
- Kernel Module
  - elem/2 - access by index 
  - put_elem/3 - insert value at index
  - tuple_size/1 - returns number of elements

```elixir
tuple = {"a", 2, :atom}
```

### <ins>Keyword Lists</ins>

A list made up exclusively of two element tuples where the first element is a key which is required to be an atom and the second is a value which can be any type

<!-- livebook:{"force_markdown":true} -->

```elixir
[{key1: "value"}, {key2: 2}, {key3: :three}]
```

Alternatively Keyword List can be writen as

<!-- livebook:{"force_markdown":true} -->

```elixir
[key1: "value", key2: 2, key3: :three]
```

### Characteristics

* Can contain duplicate keys
* Square brackets can be skipped when passed as the last value of a function
* Implements the Enumerable protocol
* Ordering is not guarenteed make them in appropriate for pattern matching

### Uses

Mostly used to pass options to functions

<!-- livebook:{"break_markdown":true} -->

### <ins>Map<ins>

Maps are considered the "go to" key-value data structure in Elixi

### Characteristics

* Access is logarithmic time (access time grows as the map grows, but not in direct poportion)
* Non-ordered
* Can use any key type
* Duplicate keys are not allowed
* Atom keys allow the `key: "value"` syntax to be used
* Atom keys allow dot notation `map.key`
  * `map.key` - raises an KeyError if key is non-existant
  * map[:key] - returns `nil` if key is non-existant
* String keys use the `=>` syntax `%{"hello" => "world}`

### Uses

* Passing parameters to function
* Fast access

### Functionality

* update/3 - Updates the value for the given key with the provided function
* put/3 - Puts the value under the given key
* replace/3 - Puts the value under the given key only if the key exists

<!-- livebook:{"break_markdown":true} -->

### <ins>Structs</ins>

Structs are extentions on top of maps that provide compile-time checks

<!-- livebook:{"force_markdown":true} -->

```elixir
  iex> defmodule User do
  ...>  defstruct name: "John", role: "student"
  ...> end
```

### Characteristics

* A Map with a `__stuct__` key
* Provide compile time varification that data only contains fields that are defined in the struct
* Accessed and updated in the same way that maps are
  ````elixir
      iex> john = %User{}
      %{role: "student", name: "John"}
      
      iex> john.name
      "John"

      iex> john = %{john | role: "Up and coming developer!"}
      %User{role: "up and coming developer, name: "John"}

      iex> %{john | oops: :field}
      ##(KeyError) key :oops not found in: %User{role: "Up and coming developer, name: "John"}
      ```
  ````
* Consist of bare maps meaning that non of the protocols implemented for Maps are available in available in Structs
* Default values are allowed
  ````elixir
      iex> defmodule User do
      ...>  defstruct [email: ,name: "John", role: "student"]
      ...> end
      ```
  - Default values are required to follow values without defaults or an error is raised
  ````
      ** (SyntaxError) iex:107: unexpected expression after keyword list. Keyword lists must always come last in lists and maps.
  ````
  ```
  ````

## Pattern Matching

Pattern macthing has many uses in elxir. It allows data structures to be deconstructed into individual variable:value pairs, it provides polymorphism by allowing multiple function heads with different functionality, and is useful in Guard clauses.

### Characteristics

* Uses the match operator `=` which function similarly to it's behavior in algebra

### Examples

* In the case of successfule execution of a function

  ```elixir
    iex> {:ok, value} = fn value -> {:ok, value} | {:error, reason}
    {:ok, value}
  ```

  or in the case of a failure

  ```elixir
    iex> {:error, reason} = fn value -> {:ok, value} | {:error, reason}
  ```

* Accessing data structures

  ```elixir
      iex> List = [1, 2, 3]
      [1, 2, 3]
      iex> [head | tail] = list
      [1, 2, 3]
      iex> head
      1
      iex> tail
      [2, 3]
    
  - Passing params
  ```

  iex> defmodule User do
    ...> ...
    ...>   def get_user(%{id: id} = params) do
    ...>     ...
    ...>    end
    ...>end

  iex> params = %{id: 1234}
    iex> User.get(params)
    %{{name: "John", role: "student", id: 1234}}

  ```

  ```

<!-- livebook:{"break_markdown":true} -->

### <ins>MapSet</ins>

MapSet is a data structure that can contain unique values of any type

### Chacteristics

* All values are unique with attempts to add duplicate keys is a no-op
* Built on %MapSet{} struct
  * %MapStruct{} can be used to pattern to verify something is a MapSet
    ```elixir
         iex> match?(%mapSet{}, MapSet.new())
         true
         
    ```

    * Struct fields are private and require the functions in the MapSet modual to be used when operating on sets

```elixir
mapset = MapSet.new([])

updated_set =
  mapset
  |> MapSet.put([1])
  |> MapSet.put(["a"])
  |> MapSet.put([:two])
  |> MapSet.put(1)
  |> MapSet.put(:two)
  |> MapSet.put({:two})
  |> MapSet.put(1)

list = [1, 2]
[head | tail] = list
[head | tail] = tail
tail
```
